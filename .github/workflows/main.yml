name: Build and Test
permissions:
  contents: read

on:
  # Trigger on pushes to main and feature branches
  push:
    branches: [ main, develop, feature/* ]
  
  # Trigger on pull requests to main
  pull_request:
    branches: [ main, develop ]
  
  # Manual workflow dispatch for testing
  workflow_dispatch:
    inputs:
      build_android:
        description: 'Build Android app'
        required: false
        default: true
        type: boolean
      build_ios:
        description: 'Build iOS app'
        required: false
        default: true
        type: boolean
      run_tests:
        description: 'Run tests'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # Lint and test job
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.run_tests }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint 

      - name: TypeScript check
        run: npx tsc --noEmit

      - name: Check for build errors
        run: |
          echo "Checking for potential build issues..."
          # Check if all required files exist
          if [ ! -f "app.json" ]; then
            echo "❌ app.json not found"
            exit 1
          fi
          if [ ! -f "eas.json" ]; then
            echo "❌ eas.json not found"
            exit 1
          fi
          echo "✅ Configuration files present"

  # Android build job
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.build_android }}
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: 'platforms;android-34 build-tools;34.0.0'

      - name: Install dependencies
        run: npm ci

      - name: Setup Expo 
        run: |
          npm install -g expo
          expo --version

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Prebuild Android
        run: |
          echo "Prebuilding Android project..."
          npx expo prebuild --platform android --clean

      - name: Build Android (Development)
        timeout-minutes: 45
        run: |
          echo "Building Android development build..."
          cd android
          ./gradlew assembleDebug


  # iOS build job
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.build_ios }}
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Install dependencies
        run: npm ci

      - name: Setup Expo
        run: |
          npm install -g expo
          expo --version

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Prebuild iOS
        run: |
          echo "Prebuilding iOS project..."
          npx expo prebuild --platform ios --clean

      - name: Install iOS dependencies
        run: |
          cd ios
          pod install --repo-update

      - name: Build iOS (Development)
        timeout-minutes: 45
        run: |
          echo "Building iOS development build..."
          cd ios
          
          echo "Available SDKs:"
          xcodebuild -showsdks | grep iphonesimulator || true
          
          AVAILABLE_SDK=$(xcodebuild -showsdks | grep iphonesimulator | grep -v "26.0" | tail -1 | awk '{print $NF}' || echo "iphonesimulator")
          echo "Using SDK: $AVAILABLE_SDK"
          
          # Get available simulators and use the first iPhone simulator
          SIMULATOR_NAME=$(xcrun simctl list devices available | grep "iPhone" | head -1 | sed 's/.*(\([^)]*\)).*/\1/' || echo "iPhone 16")
          echo "Using Simulator: $SIMULATOR_NAME"
          
          xcodebuild -workspace pulse.xcworkspace \
            -scheme pulse \
            -configuration Debug \
            -sdk "$AVAILABLE_SDK" \
            -destination "platform=iOS Simulator,name=$SIMULATOR_NAME" \
            build



  # Build summary job
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-android, build-ios]
    if: always()
    
    steps:
      - name: Generate build summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Lint and Test Status
          if [ "${{ needs.lint-and-test.result }}" = "success" ]; then
            echo "✅ **Lint and Test**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.lint-and-test.result }}" = "failure" ]; then
            echo "❌ **Lint and Test**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Lint and Test**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Android Build Status
          if [ "${{ needs.build-android.result }}" = "success" ]; then
            echo "✅ **Android Build**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-android.result }}" = "failure" ]; then
            echo "❌ **Android Build**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Android Build**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # iOS Build Status
          if [ "${{ needs.build-ios.result }}" = "success" ]; then
            echo "✅ **iOS Build**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-ios.result }}" = "failure" ]; then
            echo "❌ **iOS Build**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **iOS Build**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.lint-and-test.result }}" = "success" ] && 
             ([ "${{ needs.build-android.result }}" = "success" ] || [ "${{ needs.build-android.result }}" = "skipped" ]) && 
             ([ "${{ needs.build-ios.result }}" = "success" ] || [ "${{ needs.build-ios.result }}" = "skipped" ]); then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Overall Status**: All builds successful!" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Overall Status**: Some builds failed or were skipped" >> $GITHUB_STEP_SUMMARY
          fi
