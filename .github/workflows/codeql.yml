name: "CodeQL Analysis"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly scans (2025 best practice)

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none
        - language: swift
          build-mode: manual
        - language: java-kotlin
          build-mode: manual
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      if: matrix.language == 'swift' || matrix.language == 'java-kotlin'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    # Setup Java for Kotlin/Java builds
    - name: Setup Java
      if: matrix.language == 'java-kotlin'
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # Setup Android SDK for Kotlin/Java builds
    - name: Setup Android SDK
      if: matrix.language == 'java-kotlin'
      uses: android-actions/setup-android@v3
      with:
        packages: 'platforms;android-34 build-tools;34.0.0'

    # Setup Xcode for Swift builds
    - name: Setup Xcode
      if: matrix.language == 'swift'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'

    - name: Install dependencies
      if: matrix.language == 'swift' || matrix.language == 'java-kotlin'
      run: npm ci

    - name: Setup Expo
      if: matrix.language == 'swift' || matrix.language == 'java-kotlin'
      run: |
        npm install -g expo
        expo --version

    - name: Install CocoaPods
      if: matrix.language == 'swift'
      run: |
        sudo gem install cocoapods
        pod --version

    - name: Cache CocoaPods
      if: matrix.language == 'swift'
      uses: actions/cache@v4
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-


    - name: Cache Gradle dependencies
      if: matrix.language == 'java-kotlin'
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Prebuild Android
      if: matrix.language == 'java-kotlin'
      run: |
        echo "Prebuilding Android project..."
        npx expo prebuild --platform android --clean

    - name: Prebuild iOS
      if: matrix.language == 'swift'
      run: |
        echo "Prebuilding iOS project..."
        npx expo prebuild --platform ios --clean --no-install

    - name: Install iOS dependencies
      if: matrix.language == 'swift'
      run: |
        cd ios
        pod install --repo-update

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}

    # Autobuild for languages that support it (2025 best practice)
    - name: Autobuild
      if: matrix.build-mode == 'none'
      uses: github/codeql-action/autobuild@v3

    # Build projects for CodeQL analysis (manual build mode)
    - name: Build for CodeQL Analysis
      if: matrix.build-mode == 'manual'
      shell: bash
      timeout-minutes: 120
      run: |
        set -e
        
        if [ "${{ matrix.language }}" = "swift" ]; then
          echo "Building React Native iOS project for CodeQL analysis..."
          cd ios
          
          echo "Available SDKs:"
          xcodebuild -showsdks | grep iphonesimulator || true
          
          AVAILABLE_SDK=$(xcodebuild -showsdks | grep iphonesimulator | grep -v "26.0" | tail -1 | awk '{print $NF}' || echo "iphonesimulator")
          echo "Using SDK: $AVAILABLE_SDK"
          
          xcodebuild -workspace pulse.xcworkspace \
            -scheme pulse \
            -configuration Debug \
            -sdk "$AVAILABLE_SDK" \
            -destination 'platform=iOS Simulator' \
            build
        elif [ "${{ matrix.language }}" = "java-kotlin" ]; then
          echo "Building Android project for CodeQL analysis..."
          cd android
          ./gradlew assembleDebug
        else
          echo "Manual build mode not implemented for language: ${{ matrix.language }}"
          exit 1
        fi

    - name: Fallback iOS Build
      if: matrix.language == 'swift' && failure()
      shell: bash
      timeout-minutes: 30
      run: |
        echo "Attempting fallback iOS build with minimal configuration..."
        cd ios
        
        AVAILABLE_SDK=$(xcodebuild -showsdks | grep iphonesimulator | grep -v "26.0" | tail -1 | awk '{print $NF}' || echo "iphonesimulator")
        echo "Fallback using SDK: $AVAILABLE_SDK"
        
        xcodebuild -workspace pulse.xcworkspace \
          -scheme pulse \
          -configuration Debug \
          -sdk "$AVAILABLE_SDK" \
          -destination 'platform=iOS Simulator' \
          build-for-testing

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    # Upload SARIF file on failure for debugging
    - name: Upload failed CodeQL SARIF
      if: failure()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ runner.temp }}/codeql-failed-run.sarif
      continue-on-error: true
